/*Icarus v1.0.8
Testing logging system, include BME280, RTC1307, and SD card module
*/

//LIBRARY
#include <Wire.h>
#include <SPI.h>
//Data System
#include <DS1307.h>
#include <FS.h>
#include <SD.h>
//Sensor System
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
#include <TinyGPSPlus.h>


//BME280 Initialization
Adafruit_BME280 bme(4);

//DS1307 Initialization
DS1307 rtc;
uint8_t sec, minute, hour, day, month;
uint16_t year;

//GPS Initialization
TinyGPSPlus gps;

//BNO055 Initialization
Adafruit_BNO055 bno;

//Environmental Variable
#define SEALEVELPRESSURE_HPA (1013.25)

//Storing Variable
//gps
double lat;
double lng;
double gpsalt;
double gpsspd;
int gpsnum;
//IMU
double eulerx;
double eulery;
double eulerz;
float accelx;
float accely;
float accelz;
float gyrox;
float gyroy;
float gyroz;



void setup() {
  //Serial Setup
  Serial.begin(115200);
  Serial.println("ICARUS v1.8.2");
  Serial2.begin(9600, SERIAL_8N1, 15, 16);//  Initialize Serial2 for communication with the GPS module. RX on GPIO 15, TX on GPIO 16



  //SDcard Setup - need to add a failsafe system to check if there are data in the SD before overwrite
  bool sd_status = SD.begin(5);
  uint8_t cardType = SD.cardType();
  if (sd_status) {
    Serial.println("SD-card Mount detected");

    if(cardType == CARD_NONE){
      Serial.println("No SD-card attached");
    } else {
      writeFile(SD, "/flightdata.txt", "ICARUS FLIGHT COMPUTER V1.8.2\n");
    }

  } else {
    Serial.println("Unable to detected SD-card Module");
    while(1);
  }


  //Barometer Setup
  bool bme_status = bme.begin();
  if (bme_status) {
    Serial.println("Barometer BME280 detected\n");
    appendFile(SD, "/flightdata.txt", "Barometer BME280 detected\n");
  } else {
    Serial.println("Unable to detected BME280");
    appendFile(SD, "/flightdata.txt", "Unable to detected BME280\n");
    while(1);
  }
  
  //IMU Setup
  bool bno_status = bno.begin();
  if (bno_status) {
    Serial.println("IMU BNO055 detected");
    appendFile(SD, "/flightdata.txt", "IMU BNO055 detected\n");
    bno.setExtCrystalUse(true);
  } else {
    Serial.println("Unable to detected BNO055");
    appendFile(SD, "/flightdata.txt", "Unable to detected BNO055\n");
    while(1);
  }


  //RTC Setup
  rtc.begin();
  rtc.start();


  Serial.println();
  appendFile(SD, "/flightdata.txt", "\n");
  appendFile(SD, "/flightdata.txt", "Time,Altitude,Latitude,Longtitude,GPS-Altitude,GPS-Velocity,Satellite,Eulerx,Eulery,Eulerz,Accelx,Accely,Accelz,Gyrox,Gyroy,Gyroz,Temperature,Pressure,Humidity\n");
  delay(5000); //allow all component warm up, especially GPS to connect
  
}

void loop() {
  rtc.get(&sec, &minute, &hour, &day, &month, &year);
  char DataString[150];
  
  //BME280 Data
  float altitude = bme.readAltitude(SEALEVELPRESSURE_HPA);
  float temperature = bme.readTemperature();
  float pressure = bme.readPressure() / 100.0F;
  float humidity = bme.readHumidity();

  //IMU Data
  sensors_event_t event; 
  bno.getEvent(&event);
  imu::Vector<3> accel = bno.getVector(Adafruit_BNO055::VECTOR_ACCELEROMETER);
  imu::Vector<3> gyro = bno.getVector(Adafruit_BNO055::VECTOR_GYROSCOPE);
  eulerx = event.orientation.x;
  eulery = event.orientation.y;
  eulerz = event.orientation.z;
  accelx = accel.y() ;
  accely = accel.y();
  accelz = accel.z();
  gyrox = gyro.x();
  gyroy = gyro.y();
  gyroz = gyro.z();


  //GPS Data
  while (Serial2.available() > 0) {
    char c = Serial2.read();
    // Feed the data to the TinyGPSPlus library
    if (gps.encode(c)) {
      lat = gps.location.lat();
      lng = gps.location.lng(); 
      gpsalt = gps.altitude.meters();
      gpsspd = gps.speed.kmph();
      gpsnum = gps.satellites.value();
    }
  }
  

  sprintf(DataString, "%02d:%02d:%02d,%.2f,%.6f,%.6f,%.2f,%.2f,%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n", hour, minute, sec, altitude, lat, lng, gpsalt, gpsspd, gpsnum, eulerx, eulery, eulerz, accelx, accely, accelz, gyrox, gyroy, gyroz, temperature, pressure, humidity);

  // Print the formatted string (optional for debugging)
  Serial.println(DataString);
  appendFile(SD, "/flightdata.txt", DataString);

  // BMEValues();
  delay(1000);

}


//FUNCTIONS -------------------------------------------------------------------------------------------------------------------------------------------
//BME280 Function(s)
void BMEValues() {
  Serial.print("Temperature = ");
  Serial.print(bme.readTemperature());
  Serial.println(" *C");
  
  // Convert temperature to Fahrenheit
  /*Serial.print("Temperature = ");
  Serial.print(1.8 * bme.readTemperature() + 32);
  Serial.println(" *F");*/
  
  Serial.print("Pressure = ");
  Serial.print(bme.readPressure() / 100.0F);
  Serial.println(" hPa");
  
  Serial.print("Approx. Altitude = ");
  Serial.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
  Serial.println(" m");
  
  Serial.print("Humidity = ");
  Serial.print(bme.readHumidity());
  Serial.println(" %");
  
  Serial.println();
}

void displayInfo() {
  Serial.print(F("Location: "));
  
  // Check if GPS location data is valid
  if (gps.location.isValid()) {
    Serial.print(gps.location.lat());  // Print latitude with 6 decimal places
    Serial.print(F(","));
    Serial.print(gps.location.lng());  // Print longitude with 6 decimal places
  } else {
    Serial.print(F("INVALID"));  // Indicate that the location data is invalid
  }
  
  Serial.println();
}

//SD Function(s) - https://randomnerdtutorials.com/esp32-microsd-card-arduino/
//List directory, use listDir()
void listDir(fs::FS &fs, const char * dirname, uint8_t levels){
  Serial.printf("Listing directory: %s\n", dirname);

  File root = fs.open(dirname);
  if(!root){
    Serial.println("Failed to open directory");
    return;
  }
  if(!root.isDirectory()){
    Serial.println("Not a directory");
    return;
  }

  File file = root.openNextFile();
  while(file){
    if(file.isDirectory()){
      Serial.print("  DIR : ");
      Serial.println(file.name());
      if(levels){
        listDir(fs, file.name(), levels -1);
      }
    } else {
      Serial.print("  FILE: ");
      Serial.print(file.name());
      Serial.print("  SIZE: ");
      Serial.println(file.size());
    }
    file = root.openNextFile();
  }
}
//Create a directory, createDir()
void createDir(fs::FS &fs, const char * path){
  Serial.printf("Creating Dir: %s\n", path);
  if(fs.mkdir(path)){
    Serial.println("Dir created");
  } else {
    Serial.println("mkdir failed");
  }
}
//Remove a directory, removeDir()
void removeDir(fs::FS &fs, const char * path){
  Serial.printf("Removing Dir: %s\n", path);
  if(fs.rmdir(path)){
    Serial.println("Dir removed");
  } else {
    Serial.println("rmdir failed");
  }
}
//Read File, readFile()
void readFile(fs::FS &fs, const char * path){
  Serial.printf("Reading file: %s\n", path);

  File file = fs.open(path);
  if(!file){
    Serial.println("Failed to open file for reading");
    return;
  }

  Serial.print("Read from file: ");
  while(file.available()){
    Serial.write(file.read());
  }
  file.close();
}
// WriteFile, writeFile()
void writeFile(fs::FS &fs, const char * path, const char * message){
  Serial.printf("Writing file: %s\n", path);

  File file = fs.open(path, FILE_WRITE);
  if(!file){
    Serial.println("Failed to open file for writing");
    return;
  }
  if(file.print(message)){
    Serial.println("File written");
  } else {
    Serial.println("Write failed");
  }
  file.close();
}
// Append file, appendFile()
void appendFile(fs::FS &fs, const char * path, const char * message){
  Serial.printf("Appending to file: %s\n", path);

  File file = fs.open(path, FILE_APPEND);
  if(!file){
    Serial.println("Failed to open file for appending");
    return;
  }
  if(file.print(message)){
      Serial.println("Message appended");
  } else {
    Serial.println("Append failed");
  }
  file.close();
}
//Rename File, renameFile()
void renameFile(fs::FS &fs, const char * path1, const char * path2){
  Serial.printf("Renaming file %s to %s\n", path1, path2);
  if (fs.rename(path1, path2)) {
    Serial.println("File renamed");
  } else {
    Serial.println("Rename failed");
  }
}
//Detele File, deleteFile()
void deleteFile(fs::FS &fs, const char * path){
  Serial.printf("Deleting file: %s\n", path);
  if(fs.remove(path)){
    Serial.println("File deleted");
  } else {
    Serial.println("Delete failed");
  }
}
//Test File, testFileI0()
void testFileIO(fs::FS &fs, const char * path){
  File file = fs.open(path);
  static uint8_t buf[512];
  size_t len = 0;
  uint32_t start = millis();
  uint32_t end = start;
  if(file){
    len = file.size();
    size_t flen = len;
    start = millis();
    while(len){
      size_t toRead = len;
      if(toRead > 512){
        toRead = 512;
      }
      file.read(buf, toRead);
      len -= toRead;
    }
    end = millis() - start;
    Serial.printf("%u bytes read for %u ms\n", flen, end);
    file.close();
  } else {
    Serial.println("Failed to open file for reading");
  }


  file = fs.open(path, FILE_WRITE);
  if(!file){
    Serial.println("Failed to open file for writing");
    return;
  }

  size_t i;
  start = millis();
  for(i=0; i<2048; i++){
    file.write(buf, 512);
  }
  end = millis() - start;
  Serial.printf("%u bytes written for %u ms\n", 2048 * 512, end);
  file.close();
}

